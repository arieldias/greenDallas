@mixin mobile {
  @media (max-width: #{$tablet-width - 1px}) {
    @content;
  }
}

@mixin tablet {
  @media (min-width: #{$tablet-width}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$desktop-width}) {
    @content;
  }
}

@mixin large {
  @media (min-width: #{$large-width}) {
    @content;
  }
}

@mixin prefixed($property, $value) {
  @if $webkit == true {
    -webkit-#{$property}: #{$value};
  }

  @if $moz == true {
    -moz-#{$property}: #{$value};
  }

  @if $ms == true {
    -ms-#{$property}: #{$value};
  }

  @if $o == true {
    -o-#{$property}: #{$value};
  }

  #{$property}: #{$value};
}

// prefix keyframes
@mixin keyframes($name) {
  @if $webkit == true {
    @-webkit-keyframes #{$name} {
      @content;
    }
  }

  @if $moz == true {
    @-moz-keyframes #{$name} {
      @content;
    }
  }

  @if $ms == true {
    @-ms-keyframes #{$name} {
      @content;
    }
  }

  @if $o == true {
    @-o-keyframes #{$name} {
      @content;
    }
  }

  @keyframes #{$name} {
    @content;
  }
}

@mixin hardwareAccel() {
	// Improve performance on mobile/tablet devices
	// Perspective reduces blurryness of text in Chrome
	@include prefixed(transform, perspective(1px) translateZ(0));
}

@mixin improveAntiAlias() {
	// Improve aliasing on mobile/tablet devices
	box-shadow: 0 0 1px rgba(0, 0, 0, 0);
}

@mixin forceBlockLevel() {
	// Transforms need to be block-level to work
	display: inline-block;
	vertical-align: middle;
}

@mixin hacks() {
	@include forceBlockLevel();
	@include hardwareAccel();
	@include improveAntiAlias();
}

@mixin bounceToRight() {
  @include hacks();
	position: relative;
	
	&:before {
		content: "";
		position: absolute;
		z-index: -1;
		top: 0;
    left: 0;
    background:darken($submitGreen, 5%);
		right: 0;
		bottom: 0;
		@include prefixed(transform, scaleX(0));
		@include prefixed(transform-origin, 0 50%);
		@include prefixed(transition-property, transform);
		@include prefixed(transition-duration, $mediumDuration);
		@include prefixed(transition-timing-function, ease-out);
	}

	&:hover,
	&:focus {
		color: $white;
		&:before {
			@include prefixed(transform, scaleX(1));
			@include prefixed(transition-timing-function, cubic-bezier(.52,1.64,.37,.66));
		}
	}
}

@mixin highLightIcon($ele, $color) {
  .#{$ele}__icon {
    @include hacks();
    position: relative;
    background: $color;
    cursor: pointer;
    overflow: hidden;
  	&:before {
	  	content: "";
  	  position: absolute;
	  	z-index: -1;
  		top: 0;
      left: 0;
      background:darken($color, 5%);
  		right: 0;
      bottom: 0;
      border-radius: inherit;
	  	@include prefixed(transform, scaleY(0));
  		@include prefixed(transform-origin, 60% 0%);
		  @include prefixed(transition-property, transform);
		  @include prefixed(transition-duration, $mediumDuration);
	  	@include prefixed(transition-timing-function, ease-out);
    }
  }

  &:hover,
  &:focus {
    .#{$ele}__icon {
	  	color: $white;
  		&:before {
			  @include prefixed(transform, scaleY(1));
			  @include prefixed(transition-timing-function, cubic-bezier(.22,.85));
		  }
    }
  }
}